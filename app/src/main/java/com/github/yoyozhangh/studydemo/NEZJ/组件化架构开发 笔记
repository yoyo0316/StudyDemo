
实现分架构、分业务进行快捷开发，你需要掌握的核心架构

【课程主题】BAT大型安卓项目的开发之旅-组件化架构
【课程大纲】
1、做到快捷稳定、分架构、分业务进行敏捷开发
2、实现代码，资源的完全隔离，避免无意间调用
3、实现多人协作开发，提高开发效率

戳此链接加入学习:https://url.163.com/TBd


BAT 大型安卓项目开发之旅

组件化架构

什么是组件化？
项目发展到一定的程度，随着业务和人员的增多，代码会越来越臃肿，维护难度越来越大，这时候就必须
将模块拆分成更小的组件，达到降低耦合，代码复用的目的

相比模块而言，组件化偏功能导向，颗粒度更小，模块偏业务导向，一个模块可以包含多个组件。

组件化使用场景
几乎任何项目都可以进行组件化开发，尤其适合业务功能复杂的大型项目

大型企业，实现团队协作开发项目

组件化优点：
实现代码解耦，复用，是代码更加清晰
有利于团队协作开发，开发人员之间职责明确，互不干扰
加快编译速度，提高开发效率，降低项目维护难度。

组件化不足
在Application 与 Library 之间切换时，对一些注入框架支持不友好，比如 ButterKnife
作为Application运行时，不适合在Application中定义方法。

组件化需要解决的问题

1，统一管理项目开发环境
使用gradle.properties 配置编译环境属性，例如 compileSdkVersion 等

2，组件需要满足单独运行与调试的要求
可以作为一个Application单独运行与调试

3，实现组件之间的界面跳转和数据传递
为组件创建中间层接口，每个组件需要提供各自的实现

4,组件相互之间的集成调试，包括只依赖部分组件
在 gradle.properties 中配置组件是否独立运行属性，通过调整属性值为 false实现集成调试

5，组件中Application的使用
在APP 组件中通过反射实例化组件的Application对象

6，组件之间实现代码隔离，资源文件隔离
在APP组件中使用runtimeOnly 依赖组件实现代码隔离，在组件中使用resourcePrefix '组件名_'实现资源文件隔离。


