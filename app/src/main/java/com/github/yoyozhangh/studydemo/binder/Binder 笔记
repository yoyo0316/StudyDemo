

Binder核心机制分析，揭秘跨进程的实现原理

什么是Binder ？

安卓的IPC机制

Linux 的驱动

安卓系统中的Binder 类，实现了IBinder接口

Binder在安卓中的使用

四大组件

系统 service 如 AMS，PMS 的实现都依赖于Binder 的通信机制

为什么要在增加 Binder机制

常见的进程间通信机制： 管道、消息队列、共享 内存和Socket

原因：基于性能、稳定性 和安全性几方面考虑


性能方面
====================================================================================

IPC                              数据拷贝次数

共享内存                            0
Binder                              1
Socket/管道/消息队列                2

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


稳定性方面
Binder：基于C/S架构，客户端（client）有什么需求就丢给服务端（Server）去完成
架构清晰，职责明确又相互独立，自然稳定性更好

共享内存：虽然无需拷贝，但是控制复杂，难以使用

从稳定性的角度讲 ，Binder 机制是优于共享内存的。



安全性方面

传统的IPC没有任何安全措施，安全依赖上层协议来确保
传统的IPC方法无法获得对方可靠的进程用户ID/进程ID（UID/PID）从而无法鉴别对方身份
传统的IPC只能由用户在数据包中填入UID/PID 容易被恶意程序利用
传统的IPC访问接入点是开放的，无法阻止恶意程序通过猜测接收方地址获得连接。
Binder既支持实名Binder，又支持 匿名Binder，安全性高。



