apply plugin: 'com.android.application'

android {
    def currentVersionCode = getVersionCode()

    compileSdkVersion compile_sdk_version.toInteger()
    defaultConfig {
        applicationId "com.github.yoyozhangh.studydemo"
        minSdkVersion min_sdk_version.toInteger()
        targetSdkVersion target_sdk_version.toInteger()
        versionCode currentVersionCode
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {

        release {
            minifyEnabled true//关闭混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false//关闭混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all {
        variant ->
            variant.outputs.each {
                output ->
//                    def outputFile =output.outputFile
//                    def apkName = outputFile.name.substring(0,outputFile.name.indexOf(".apk"))
                    def fileName = "StudyDemo_${variant.flavorName}_${buildType.name}_v${variant.versionName}_${getTime()}.apk"
//                     output.outputFileName = new File(outputFile, fileName)
                    output.outputFileName = fileName
            }
    }
}

def getTime() {
    String today = new Date().format("YYYY-MM-dd-HHmm")
    return today
}


def getVersionCode() {// 获取版本号
    def versionFile = file('version.properties')// 读取第一步新建的文件
    if (versionFile.canRead()) {// 判断文件读取异常
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def versionCode = versionProps['VERSION_CODE'].toInteger()// 读取文件里面的版本号
        def runTasks = gradle.startParameter.taskNames
        if ('assembleRelease' in runTasks) {//仅在assembleRelease任务是增加版本号,其他渠道包在此分别配置
            // 版本号自增之后再写入文件（此处是关键，版本号自增+1）
            versionProps['VERSION_CODE'] = (++versionCode).toString()
            versionProps.store(versionFile.newWriter(), null)
        }
        return versionCode // 返回自增之后的版本号
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:support-annotations:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.alibaba:fastjson:1.2.32'
    implementation project(':HandlerLib')
    implementation project(':componentlib')
    if (!loginRunAlone.toBoolean()) {
        implementation project(':logincomponent')
    }
    if (!mineRunAlone.toBoolean()) {
        implementation project(':minecomponent')
    }
    implementation project(':componentlib2')
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation 'top.zibin:Luban:1.1.8'
    implementation project(':library')
}
